// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  categoryType: (where?: CategoryTypeWhereInput) => Promise<boolean>;
  coupon: (where?: CouponWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  site: (where?: SiteWhereInput) => Promise<boolean>;
  staff: (where?: StaffWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  categoryType: (
    where: CategoryTypeWhereUniqueInput
  ) => CategoryTypeNullablePromise;
  categoryTypes: (args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CategoryType>;
  categoryTypesConnection: (args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryTypeConnectionPromise;
  coupon: (where: CouponWhereUniqueInput) => CouponNullablePromise;
  coupons: (args?: {
    where?: CouponWhereInput;
    orderBy?: CouponOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Coupon>;
  couponsConnection: (args?: {
    where?: CouponWhereInput;
    orderBy?: CouponOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CouponConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  site: (where: SiteWhereUniqueInput) => SiteNullablePromise;
  sites: (args?: {
    where?: SiteWhereInput;
    orderBy?: SiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Site>;
  sitesConnection: (args?: {
    where?: SiteWhereInput;
    orderBy?: SiteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SiteConnectionPromise;
  staff: (where: StaffWhereUniqueInput) => StaffNullablePromise;
  staffs: (args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Staff>;
  staffsConnection: (args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StaffConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createCategoryType: (data: CategoryTypeCreateInput) => CategoryTypePromise;
  updateCategoryType: (args: {
    data: CategoryTypeUpdateInput;
    where: CategoryTypeWhereUniqueInput;
  }) => CategoryTypePromise;
  updateManyCategoryTypes: (args: {
    data: CategoryTypeUpdateManyMutationInput;
    where?: CategoryTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertCategoryType: (args: {
    where: CategoryTypeWhereUniqueInput;
    create: CategoryTypeCreateInput;
    update: CategoryTypeUpdateInput;
  }) => CategoryTypePromise;
  deleteCategoryType: (
    where: CategoryTypeWhereUniqueInput
  ) => CategoryTypePromise;
  deleteManyCategoryTypes: (
    where?: CategoryTypeWhereInput
  ) => BatchPayloadPromise;
  createCoupon: (data: CouponCreateInput) => CouponPromise;
  updateCoupon: (args: {
    data: CouponUpdateInput;
    where: CouponWhereUniqueInput;
  }) => CouponPromise;
  updateManyCoupons: (args: {
    data: CouponUpdateManyMutationInput;
    where?: CouponWhereInput;
  }) => BatchPayloadPromise;
  upsertCoupon: (args: {
    where: CouponWhereUniqueInput;
    create: CouponCreateInput;
    update: CouponUpdateInput;
  }) => CouponPromise;
  deleteCoupon: (where: CouponWhereUniqueInput) => CouponPromise;
  deleteManyCoupons: (where?: CouponWhereInput) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createSite: (data: SiteCreateInput) => SitePromise;
  updateSite: (args: {
    data: SiteUpdateInput;
    where: SiteWhereUniqueInput;
  }) => SitePromise;
  updateManySites: (args: {
    data: SiteUpdateManyMutationInput;
    where?: SiteWhereInput;
  }) => BatchPayloadPromise;
  upsertSite: (args: {
    where: SiteWhereUniqueInput;
    create: SiteCreateInput;
    update: SiteUpdateInput;
  }) => SitePromise;
  deleteSite: (where: SiteWhereUniqueInput) => SitePromise;
  deleteManySites: (where?: SiteWhereInput) => BatchPayloadPromise;
  createStaff: (data: StaffCreateInput) => StaffPromise;
  updateStaff: (args: {
    data: StaffUpdateInput;
    where: StaffWhereUniqueInput;
  }) => StaffPromise;
  updateManyStaffs: (args: {
    data: StaffUpdateManyMutationInput;
    where?: StaffWhereInput;
  }) => BatchPayloadPromise;
  upsertStaff: (args: {
    where: StaffWhereUniqueInput;
    create: StaffCreateInput;
    update: StaffUpdateInput;
  }) => StaffPromise;
  deleteStaff: (where: StaffWhereUniqueInput) => StaffPromise;
  deleteManyStaffs: (where?: StaffWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  categoryType: (
    where?: CategoryTypeSubscriptionWhereInput
  ) => CategoryTypeSubscriptionPayloadSubscription;
  coupon: (
    where?: CouponSubscriptionWhereInput
  ) => CouponSubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  site: (
    where?: SiteSubscriptionWhereInput
  ) => SiteSubscriptionPayloadSubscription;
  staff: (
    where?: StaffSubscriptionWhereInput
  ) => StaffSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "unit_ASC"
  | "unit_DESC"
  | "price_ASC"
  | "price_DESC"
  | "sale_price_ASC"
  | "sale_price_DESC"
  | "discount_percent_ASC"
  | "discount_percent_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "image_ASC"
  | "image_DESC"
  | "indexFile_ASC"
  | "indexFile_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StatusCoupon = "ACTIVE" | "REVOKED";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ship_address_ASC"
  | "ship_address_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "payment_method_ASC"
  | "payment_method_DESC"
  | "status_ASC"
  | "status_DESC"
  | "indexFile_ASC"
  | "indexFile_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StaffOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "indexFile_ASC"
  | "indexFile_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "image_ASC"
  | "image_DESC"
  | "indexFile_ASC"
  | "indexFile_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SiteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "status_ASC"
  | "status_DESC"
  | "indexFile_ASC"
  | "indexFile_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CouponOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "campaings_name_ASC"
  | "campaings_name_DESC"
  | "discount_percent_ASC"
  | "discount_percent_DESC"
  | "discount_code_ASC"
  | "discount_code_DESC"
  | "number_code_ASC"
  | "number_code_DESC"
  | "minimum_amount_required_ASC"
  | "minimum_amount_required_DESC"
  | "expiration_date_ASC"
  | "expiration_date_DESC"
  | "status_ASC"
  | "status_DESC"
  | "indexFile_ASC"
  | "indexFile_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "unit_ASC"
  | "unit_DESC"
  | "total_order_ASC"
  | "total_order_DESC"
  | "total_amount_ASC"
  | "total_amount_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "image_ASC"
  | "image_DESC"
  | "indexFile_ASC"
  | "indexFile_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PaymentMethod = "BANKING" | "CASH_ON_SHIP";

export type StatusOrder = "SHIPPING" | "PENDING" | "FAILED" | "PROCESSING";

export type StatusSite = "ACTIVE" | "MAINTAIN" | "DOWN";

export type Role = "ADMIN" | "MANAGER" | "MEMBER" | "SHIPER" | "UNSET";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "image_ASC"
  | "image_DESC"
  | "indexFile_ASC"
  | "indexFile_DESC"
  | "isDeleted_ASC"
  | "isDeleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CategoryUpdateInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  image?: Maybe<String>;
  parent?: Maybe<CategoryTypeUpdateManyInput>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export type CategoryTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SiteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  status?: Maybe<StatusSite>;
  status_not?: Maybe<StatusSite>;
  status_in?: Maybe<StatusSite[] | StatusSite>;
  status_not_in?: Maybe<StatusSite[] | StatusSite>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SiteWhereInput[] | SiteWhereInput>;
}

export interface CustomerUpdateInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  unit?: Maybe<String>;
  total_order?: Maybe<Int>;
  total_amount?: Maybe<Int>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  unit?: Maybe<String>;
  price: Int;
  sale_price?: Maybe<Int>;
  discount_percent?: Maybe<Int>;
  quantity: Int;
  image?: Maybe<String>;
  category_type?: Maybe<CategoryTypeCreateManyInput>;
  category?: Maybe<CategoryCreateManyInput>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface StaffSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StaffWhereInput>;
  AND?: Maybe<StaffSubscriptionWhereInput[] | StaffSubscriptionWhereInput>;
}

export interface OrderUpdateManyMutationInput {
  ship_address?: Maybe<String>;
  amount?: Maybe<Int>;
  payment_method?: Maybe<PaymentMethod>;
  status?: Maybe<StatusOrder>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CouponWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  campaings_name?: Maybe<String>;
  campaings_name_not?: Maybe<String>;
  campaings_name_in?: Maybe<String[] | String>;
  campaings_name_not_in?: Maybe<String[] | String>;
  campaings_name_lt?: Maybe<String>;
  campaings_name_lte?: Maybe<String>;
  campaings_name_gt?: Maybe<String>;
  campaings_name_gte?: Maybe<String>;
  campaings_name_contains?: Maybe<String>;
  campaings_name_not_contains?: Maybe<String>;
  campaings_name_starts_with?: Maybe<String>;
  campaings_name_not_starts_with?: Maybe<String>;
  campaings_name_ends_with?: Maybe<String>;
  campaings_name_not_ends_with?: Maybe<String>;
  discount_percent?: Maybe<Int>;
  discount_percent_not?: Maybe<Int>;
  discount_percent_in?: Maybe<Int[] | Int>;
  discount_percent_not_in?: Maybe<Int[] | Int>;
  discount_percent_lt?: Maybe<Int>;
  discount_percent_lte?: Maybe<Int>;
  discount_percent_gt?: Maybe<Int>;
  discount_percent_gte?: Maybe<Int>;
  discount_code?: Maybe<Int>;
  discount_code_not?: Maybe<Int>;
  discount_code_in?: Maybe<Int[] | Int>;
  discount_code_not_in?: Maybe<Int[] | Int>;
  discount_code_lt?: Maybe<Int>;
  discount_code_lte?: Maybe<Int>;
  discount_code_gt?: Maybe<Int>;
  discount_code_gte?: Maybe<Int>;
  number_code?: Maybe<Int>;
  number_code_not?: Maybe<Int>;
  number_code_in?: Maybe<Int[] | Int>;
  number_code_not_in?: Maybe<Int[] | Int>;
  number_code_lt?: Maybe<Int>;
  number_code_lte?: Maybe<Int>;
  number_code_gt?: Maybe<Int>;
  number_code_gte?: Maybe<Int>;
  category_type_some?: Maybe<CategoryTypeWhereInput>;
  minimum_amount_required?: Maybe<Int>;
  minimum_amount_required_not?: Maybe<Int>;
  minimum_amount_required_in?: Maybe<Int[] | Int>;
  minimum_amount_required_not_in?: Maybe<Int[] | Int>;
  minimum_amount_required_lt?: Maybe<Int>;
  minimum_amount_required_lte?: Maybe<Int>;
  minimum_amount_required_gt?: Maybe<Int>;
  minimum_amount_required_gte?: Maybe<Int>;
  expiration_date?: Maybe<String>;
  expiration_date_not?: Maybe<String>;
  expiration_date_in?: Maybe<String[] | String>;
  expiration_date_not_in?: Maybe<String[] | String>;
  expiration_date_lt?: Maybe<String>;
  expiration_date_lte?: Maybe<String>;
  expiration_date_gt?: Maybe<String>;
  expiration_date_gte?: Maybe<String>;
  expiration_date_contains?: Maybe<String>;
  expiration_date_not_contains?: Maybe<String>;
  expiration_date_starts_with?: Maybe<String>;
  expiration_date_not_starts_with?: Maybe<String>;
  expiration_date_ends_with?: Maybe<String>;
  expiration_date_not_ends_with?: Maybe<String>;
  status?: Maybe<StatusCoupon>;
  status_not?: Maybe<StatusCoupon>;
  status_in?: Maybe<StatusCoupon[] | StatusCoupon>;
  status_not_in?: Maybe<StatusCoupon[] | StatusCoupon>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CouponWhereInput[] | CouponWhereInput>;
}

export interface CustomerUpdateManyDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  unit?: Maybe<String>;
  total_order?: Maybe<Int>;
  total_amount?: Maybe<Int>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface CustomerUpdateManyWithWhereNestedInput {
  where: CustomerScalarWhereInput;
  data: CustomerUpdateManyDataInput;
}

export interface CouponSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CouponWhereInput>;
  AND?: Maybe<CouponSubscriptionWhereInput[] | CouponSubscriptionWhereInput>;
}

export type StaffWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryTypeWhereInput>;
  AND?: Maybe<
    CategoryTypeSubscriptionWhereInput[] | CategoryTypeSubscriptionWhereInput
  >;
}

export interface CustomerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  unit?: Maybe<String>;
  unit_not?: Maybe<String>;
  unit_in?: Maybe<String[] | String>;
  unit_not_in?: Maybe<String[] | String>;
  unit_lt?: Maybe<String>;
  unit_lte?: Maybe<String>;
  unit_gt?: Maybe<String>;
  unit_gte?: Maybe<String>;
  unit_contains?: Maybe<String>;
  unit_not_contains?: Maybe<String>;
  unit_starts_with?: Maybe<String>;
  unit_not_starts_with?: Maybe<String>;
  unit_ends_with?: Maybe<String>;
  unit_not_ends_with?: Maybe<String>;
  total_order?: Maybe<Int>;
  total_order_not?: Maybe<Int>;
  total_order_in?: Maybe<Int[] | Int>;
  total_order_not_in?: Maybe<Int[] | Int>;
  total_order_lt?: Maybe<Int>;
  total_order_lte?: Maybe<Int>;
  total_order_gt?: Maybe<Int>;
  total_order_gte?: Maybe<Int>;
  total_amount?: Maybe<Int>;
  total_amount_not?: Maybe<Int>;
  total_amount_in?: Maybe<Int[] | Int>;
  total_amount_not_in?: Maybe<Int[] | Int>;
  total_amount_lt?: Maybe<Int>;
  total_amount_lte?: Maybe<Int>;
  total_amount_gt?: Maybe<Int>;
  total_amount_gte?: Maybe<Int>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  OR?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  NOT?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface CategoryTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryTypeWhereInput[] | CategoryTypeWhereInput>;
}

export interface StaffUpdateInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface StaffWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StaffWhereInput[] | StaffWhereInput>;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CustomerUpsertWithWhereUniqueNestedInput {
  where: CustomerWhereUniqueInput;
  update: CustomerUpdateDataInput;
  create: CustomerCreateInput;
}

export interface SiteUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<StatusSite>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CustomerUpdateDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  unit?: Maybe<String>;
  total_order?: Maybe<Int>;
  total_amount?: Maybe<Int>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ship_address?: Maybe<String>;
  ship_address_not?: Maybe<String>;
  ship_address_in?: Maybe<String[] | String>;
  ship_address_not_in?: Maybe<String[] | String>;
  ship_address_lt?: Maybe<String>;
  ship_address_lte?: Maybe<String>;
  ship_address_gt?: Maybe<String>;
  ship_address_gte?: Maybe<String>;
  ship_address_contains?: Maybe<String>;
  ship_address_not_contains?: Maybe<String>;
  ship_address_starts_with?: Maybe<String>;
  ship_address_not_starts_with?: Maybe<String>;
  ship_address_ends_with?: Maybe<String>;
  ship_address_not_ends_with?: Maybe<String>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  payment_method?: Maybe<PaymentMethod>;
  payment_method_not?: Maybe<PaymentMethod>;
  payment_method_in?: Maybe<PaymentMethod[] | PaymentMethod>;
  payment_method_not_in?: Maybe<PaymentMethod[] | PaymentMethod>;
  status?: Maybe<StatusOrder>;
  status_not?: Maybe<StatusOrder>;
  status_in?: Maybe<StatusOrder[] | StatusOrder>;
  status_not_in?: Maybe<StatusOrder[] | StatusOrder>;
  customer_some?: Maybe<CustomerWhereInput>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface CustomerUpdateWithWhereUniqueNestedInput {
  where: CustomerWhereUniqueInput;
  data: CustomerUpdateDataInput;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  unit?: Maybe<String>;
  price?: Maybe<Int>;
  sale_price?: Maybe<Int>;
  discount_percent?: Maybe<Int>;
  quantity?: Maybe<Int>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CustomerUpdateManyInput {
  create?: Maybe<CustomerCreateInput[] | CustomerCreateInput>;
  update?: Maybe<
    | CustomerUpdateWithWhereUniqueNestedInput[]
    | CustomerUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CustomerUpsertWithWhereUniqueNestedInput[]
    | CustomerUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  connect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  set?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  disconnect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
  deleteMany?: Maybe<CustomerScalarWhereInput[] | CustomerScalarWhereInput>;
  updateMany?: Maybe<
    | CustomerUpdateManyWithWhereNestedInput[]
    | CustomerUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  unit?: Maybe<String>;
  unit_not?: Maybe<String>;
  unit_in?: Maybe<String[] | String>;
  unit_not_in?: Maybe<String[] | String>;
  unit_lt?: Maybe<String>;
  unit_lte?: Maybe<String>;
  unit_gt?: Maybe<String>;
  unit_gte?: Maybe<String>;
  unit_contains?: Maybe<String>;
  unit_not_contains?: Maybe<String>;
  unit_starts_with?: Maybe<String>;
  unit_not_starts_with?: Maybe<String>;
  unit_ends_with?: Maybe<String>;
  unit_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  sale_price?: Maybe<Int>;
  sale_price_not?: Maybe<Int>;
  sale_price_in?: Maybe<Int[] | Int>;
  sale_price_not_in?: Maybe<Int[] | Int>;
  sale_price_lt?: Maybe<Int>;
  sale_price_lte?: Maybe<Int>;
  sale_price_gt?: Maybe<Int>;
  sale_price_gte?: Maybe<Int>;
  discount_percent?: Maybe<Int>;
  discount_percent_not?: Maybe<Int>;
  discount_percent_in?: Maybe<Int[] | Int>;
  discount_percent_not_in?: Maybe<Int[] | Int>;
  discount_percent_lt?: Maybe<Int>;
  discount_percent_lte?: Maybe<Int>;
  discount_percent_gt?: Maybe<Int>;
  discount_percent_gte?: Maybe<Int>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  category_type_some?: Maybe<CategoryTypeWhereInput>;
  category_some?: Maybe<CategoryWhereInput>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface CustomerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone?: Maybe<String>;
  unit?: Maybe<String>;
  total_order?: Maybe<Int>;
  total_amount?: Maybe<Int>;
  email: String;
  password: String;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  slug: String;
  image?: Maybe<String>;
  parent?: Maybe<CategoryTypeCreateManyInput>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryTypeCreateManyInput {
  create?: Maybe<CategoryTypeCreateInput[] | CategoryTypeCreateInput>;
  connect?: Maybe<
    CategoryTypeWhereUniqueInput[] | CategoryTypeWhereUniqueInput
  >;
}

export interface CategoryUpdateDataInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  image?: Maybe<String>;
  parent?: Maybe<CategoryTypeUpdateManyInput>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryTypeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  slug: String;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryUpdateManyInput {
  create?: Maybe<CategoryCreateInput[] | CategoryCreateInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueNestedInput[]
    | CategoryUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueNestedInput[]
    | CategoryUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateInput {
  ship_address?: Maybe<String>;
  amount?: Maybe<Int>;
  payment_method?: Maybe<PaymentMethod>;
  status?: Maybe<StatusOrder>;
  customer?: Maybe<CustomerUpdateManyInput>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  unit?: Maybe<String>;
  price?: Maybe<Int>;
  sale_price?: Maybe<Int>;
  discount_percent?: Maybe<Int>;
  quantity?: Maybe<Int>;
  image?: Maybe<String>;
  category_type?: Maybe<CategoryTypeUpdateManyInput>;
  category?: Maybe<CategoryUpdateManyInput>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryTypeUpdateManyInput {
  create?: Maybe<CategoryTypeCreateInput[] | CategoryTypeCreateInput>;
  update?: Maybe<
    | CategoryTypeUpdateWithWhereUniqueNestedInput[]
    | CategoryTypeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CategoryTypeUpsertWithWhereUniqueNestedInput[]
    | CategoryTypeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CategoryTypeWhereUniqueInput[] | CategoryTypeWhereUniqueInput>;
  connect?: Maybe<
    CategoryTypeWhereUniqueInput[] | CategoryTypeWhereUniqueInput
  >;
  set?: Maybe<CategoryTypeWhereUniqueInput[] | CategoryTypeWhereUniqueInput>;
  disconnect?: Maybe<
    CategoryTypeWhereUniqueInput[] | CategoryTypeWhereUniqueInput
  >;
  deleteMany?: Maybe<
    CategoryTypeScalarWhereInput[] | CategoryTypeScalarWhereInput
  >;
  updateMany?: Maybe<
    | CategoryTypeUpdateManyWithWhereNestedInput[]
    | CategoryTypeUpdateManyWithWhereNestedInput
  >;
}

export type CouponWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryTypeUpdateWithWhereUniqueNestedInput {
  where: CategoryTypeWhereUniqueInput;
  data: CategoryTypeUpdateDataInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface CategoryTypeUpdateDataInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryTypeUpsertWithWhereUniqueNestedInput {
  where: CategoryTypeWhereUniqueInput;
  update: CategoryTypeUpdateDataInput;
  create: CategoryTypeCreateInput;
}

export interface StaffUpdateManyMutationInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryTypeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryTypeScalarWhereInput[] | CategoryTypeScalarWhereInput>;
  OR?: Maybe<CategoryTypeScalarWhereInput[] | CategoryTypeScalarWhereInput>;
  NOT?: Maybe<CategoryTypeScalarWhereInput[] | CategoryTypeScalarWhereInput>;
}

export interface SiteUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<StatusSite>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryTypeUpdateManyWithWhereNestedInput {
  where: CategoryTypeScalarWhereInput;
  data: CategoryTypeUpdateManyDataInput;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  parent_some?: Maybe<CategoryTypeWhereInput>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface CategoryTypeUpdateManyDataInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CustomerCreateManyInput {
  create?: Maybe<CustomerCreateInput[] | CustomerCreateInput>;
  connect?: Maybe<CustomerWhereUniqueInput[] | CustomerWhereUniqueInput>;
}

export interface CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateDataInput;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  ship_address: String;
  amount: Int;
  payment_method?: Maybe<PaymentMethod>;
  status?: Maybe<StatusOrder>;
  customer?: Maybe<CustomerCreateManyInput>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryCreateManyInput {
  create?: Maybe<CategoryCreateInput[] | CategoryCreateInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CustomerUpdateManyMutationInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  unit?: Maybe<String>;
  total_order?: Maybe<Int>;
  total_amount?: Maybe<Int>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface CategoryTypeUpdateInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface StaffCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone?: Maybe<String>;
  email: String;
  password: String;
  role?: Maybe<Role>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryUpdateManyDataInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CouponUpdateManyMutationInput {
  campaings_name?: Maybe<String>;
  discount_percent?: Maybe<Int>;
  discount_code?: Maybe<Int>;
  number_code?: Maybe<Int>;
  minimum_amount_required?: Maybe<Int>;
  expiration_date?: Maybe<String>;
  status?: Maybe<StatusCoupon>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CouponUpdateInput {
  campaings_name?: Maybe<String>;
  discount_percent?: Maybe<Int>;
  discount_code?: Maybe<Int>;
  number_code?: Maybe<Int>;
  category_type?: Maybe<CategoryTypeUpdateManyInput>;
  minimum_amount_required?: Maybe<Int>;
  expiration_date?: Maybe<String>;
  status?: Maybe<StatusCoupon>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CouponCreateInput {
  id?: Maybe<ID_Input>;
  campaings_name: String;
  discount_percent: Int;
  discount_code: Int;
  number_code: Int;
  category_type?: Maybe<CategoryTypeCreateManyInput>;
  minimum_amount_required?: Maybe<Int>;
  expiration_date: String;
  status?: Maybe<StatusCoupon>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryTypeUpdateManyMutationInput {
  name?: Maybe<String>;
  slug?: Maybe<String>;
  image?: Maybe<String>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export interface SiteCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<StatusSite>;
  indexFile?: Maybe<String>;
  isDeleted?: Maybe<Int>;
}

export interface CustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  unit?: Maybe<String>;
  unit_not?: Maybe<String>;
  unit_in?: Maybe<String[] | String>;
  unit_not_in?: Maybe<String[] | String>;
  unit_lt?: Maybe<String>;
  unit_lte?: Maybe<String>;
  unit_gt?: Maybe<String>;
  unit_gte?: Maybe<String>;
  unit_contains?: Maybe<String>;
  unit_not_contains?: Maybe<String>;
  unit_starts_with?: Maybe<String>;
  unit_not_starts_with?: Maybe<String>;
  unit_ends_with?: Maybe<String>;
  unit_not_ends_with?: Maybe<String>;
  total_order?: Maybe<Int>;
  total_order_not?: Maybe<Int>;
  total_order_in?: Maybe<Int[] | Int>;
  total_order_not_in?: Maybe<Int[] | Int>;
  total_order_lt?: Maybe<Int>;
  total_order_lte?: Maybe<Int>;
  total_order_gt?: Maybe<Int>;
  total_order_gte?: Maybe<Int>;
  total_amount?: Maybe<Int>;
  total_amount_not?: Maybe<Int>;
  total_amount_in?: Maybe<Int[] | Int>;
  total_amount_not_in?: Maybe<Int[] | Int>;
  total_amount_lt?: Maybe<Int>;
  total_amount_lte?: Maybe<Int>;
  total_amount_gt?: Maybe<Int>;
  total_amount_gte?: Maybe<Int>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  indexFile?: Maybe<String>;
  indexFile_not?: Maybe<String>;
  indexFile_in?: Maybe<String[] | String>;
  indexFile_not_in?: Maybe<String[] | String>;
  indexFile_lt?: Maybe<String>;
  indexFile_lte?: Maybe<String>;
  indexFile_gt?: Maybe<String>;
  indexFile_gte?: Maybe<String>;
  indexFile_contains?: Maybe<String>;
  indexFile_not_contains?: Maybe<String>;
  indexFile_starts_with?: Maybe<String>;
  indexFile_not_starts_with?: Maybe<String>;
  indexFile_ends_with?: Maybe<String>;
  indexFile_not_ends_with?: Maybe<String>;
  isDeleted?: Maybe<Int>;
  isDeleted_not?: Maybe<Int>;
  isDeleted_in?: Maybe<Int[] | Int>;
  isDeleted_not_in?: Maybe<Int[] | Int>;
  isDeleted_lt?: Maybe<Int>;
  isDeleted_lte?: Maybe<Int>;
  isDeleted_gt?: Maybe<Int>;
  isDeleted_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface SiteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SiteWhereInput>;
  AND?: Maybe<SiteSubscriptionWhereInput[] | SiteSubscriptionWhereInput>;
}

export type SiteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StaffPreviousValues {
  id: ID_Output;
  name: String;
  phone?: String;
  email: String;
  password: String;
  role?: Role;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StaffPreviousValuesPromise
  extends Promise<StaffPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StaffPreviousValuesSubscription
  extends Promise<AsyncIterator<StaffPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryTypeEdge {
  node: CategoryType;
  cursor: String;
}

export interface CategoryTypeEdgePromise
  extends Promise<CategoryTypeEdge>,
    Fragmentable {
  node: <T = CategoryTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryTypeEdgeSubscription
  extends Promise<AsyncIterator<CategoryTypeEdge>>,
    Fragmentable {
  node: <T = CategoryTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface CategoryTypeConnection {
  pageInfo: PageInfo;
  edges: CategoryTypeEdge[];
}

export interface CategoryTypeConnectionPromise
  extends Promise<CategoryTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryTypeEdge>>() => T;
  aggregate: <T = AggregateCategoryTypePromise>() => T;
}

export interface CategoryTypeConnectionSubscription
  extends Promise<AsyncIterator<CategoryTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategoryTypeSubscription>() => T;
}

export interface AggregateCategoryType {
  count: Int;
}

export interface AggregateCategoryTypePromise
  extends Promise<AggregateCategoryType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategoryTypeSubscription
  extends Promise<AsyncIterator<AggregateCategoryType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SiteSubscriptionPayload {
  mutation: MutationType;
  node: Site;
  updatedFields: String[];
  previousValues: SitePreviousValues;
}

export interface SiteSubscriptionPayloadPromise
  extends Promise<SiteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SitePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SitePreviousValuesPromise>() => T;
}

export interface SiteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SiteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SiteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SitePreviousValuesSubscription>() => T;
}

export interface AggregateStaff {
  count: Int;
}

export interface AggregateStaffPromise
  extends Promise<AggregateStaff>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStaffSubscription
  extends Promise<AsyncIterator<AggregateStaff>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StaffEdge {
  node: Staff;
  cursor: String;
}

export interface StaffEdgePromise extends Promise<StaffEdge>, Fragmentable {
  node: <T = StaffPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StaffEdgeSubscription
  extends Promise<AsyncIterator<StaffEdge>>,
    Fragmentable {
  node: <T = StaffSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StaffSubscriptionPayload {
  mutation: MutationType;
  node: Staff;
  updatedFields: String[];
  previousValues: StaffPreviousValues;
}

export interface StaffSubscriptionPayloadPromise
  extends Promise<StaffSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StaffPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StaffPreviousValuesPromise>() => T;
}

export interface StaffSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StaffSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StaffSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StaffPreviousValuesSubscription>() => T;
}

export interface Category {
  id: ID_Output;
  name: String;
  slug: String;
  image?: String;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  image: () => Promise<String>;
  parent: <T = FragmentableArray<CategoryType>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  parent: <T = Promise<AsyncIterator<CategoryTypeSubscription>>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  image: () => Promise<String>;
  parent: <T = FragmentableArray<CategoryType>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateSite {
  count: Int;
}

export interface AggregateSitePromise
  extends Promise<AggregateSite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSiteSubscription
  extends Promise<AsyncIterator<AggregateSite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface SiteConnection {
  pageInfo: PageInfo;
  edges: SiteEdge[];
}

export interface SiteConnectionPromise
  extends Promise<SiteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SiteEdge>>() => T;
  aggregate: <T = AggregateSitePromise>() => T;
}

export interface SiteConnectionSubscription
  extends Promise<AsyncIterator<SiteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SiteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSiteSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
  slug: String;
  image?: String;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  image: () => Promise<String>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SitePreviousValues {
  id: ID_Output;
  name?: String;
  description?: String;
  status?: StatusSite;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SitePreviousValuesPromise
  extends Promise<SitePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<StatusSite>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SitePreviousValuesSubscription
  extends Promise<AsyncIterator<SitePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StatusSite>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Customer {
  id: ID_Output;
  name: String;
  phone?: String;
  unit?: String;
  total_order?: Int;
  total_amount?: Int;
  email: String;
  password: String;
  image?: String;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  unit: () => Promise<String>;
  total_order: () => Promise<Int>;
  total_amount: () => Promise<Int>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  unit: () => Promise<AsyncIterator<String>>;
  total_order: () => Promise<AsyncIterator<Int>>;
  total_amount: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  unit: () => Promise<String>;
  total_order: () => Promise<Int>;
  total_amount: () => Promise<Int>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryTypeSubscriptionPayload {
  mutation: MutationType;
  node: CategoryType;
  updatedFields: String[];
  previousValues: CategoryTypePreviousValues;
}

export interface CategoryTypeSubscriptionPayloadPromise
  extends Promise<CategoryTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryTypePreviousValuesPromise>() => T;
}

export interface CategoryTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategoryTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategoryTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryTypePreviousValuesSubscription>() => T;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface CategoryTypePreviousValues {
  id: ID_Output;
  name: String;
  slug: String;
  image?: String;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryTypePreviousValuesPromise
  extends Promise<CategoryTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  image: () => Promise<String>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryTypePreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Product {
  id: ID_Output;
  name: String;
  description: String;
  unit?: String;
  price: Int;
  sale_price?: Int;
  discount_percent?: Int;
  quantity: Int;
  image?: String;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  unit: () => Promise<String>;
  price: () => Promise<Int>;
  sale_price: () => Promise<Int>;
  discount_percent: () => Promise<Int>;
  quantity: () => Promise<Int>;
  image: () => Promise<String>;
  category_type: <T = FragmentableArray<CategoryType>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  unit: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  sale_price: () => Promise<AsyncIterator<Int>>;
  discount_percent: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  category_type: <T = Promise<AsyncIterator<CategoryTypeSubscription>>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  unit: () => Promise<String>;
  price: () => Promise<Int>;
  sale_price: () => Promise<Int>;
  discount_percent: () => Promise<Int>;
  quantity: () => Promise<Int>;
  image: () => Promise<String>;
  category_type: <T = FragmentableArray<CategoryType>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateCoupon {
  count: Int;
}

export interface AggregateCouponPromise
  extends Promise<AggregateCoupon>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCouponSubscription
  extends Promise<AsyncIterator<AggregateCoupon>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CouponSubscriptionPayload {
  mutation: MutationType;
  node: Coupon;
  updatedFields: String[];
  previousValues: CouponPreviousValues;
}

export interface CouponSubscriptionPayloadPromise
  extends Promise<CouponSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CouponPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CouponPreviousValuesPromise>() => T;
}

export interface CouponSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CouponSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CouponSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CouponPreviousValuesSubscription>() => T;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface CouponPreviousValues {
  id: ID_Output;
  campaings_name: String;
  discount_percent: Int;
  discount_code: Int;
  number_code: Int;
  minimum_amount_required?: Int;
  expiration_date: String;
  status?: StatusCoupon;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CouponPreviousValuesPromise
  extends Promise<CouponPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  campaings_name: () => Promise<String>;
  discount_percent: () => Promise<Int>;
  discount_code: () => Promise<Int>;
  number_code: () => Promise<Int>;
  minimum_amount_required: () => Promise<Int>;
  expiration_date: () => Promise<String>;
  status: () => Promise<StatusCoupon>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CouponPreviousValuesSubscription
  extends Promise<AsyncIterator<CouponPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  campaings_name: () => Promise<AsyncIterator<String>>;
  discount_percent: () => Promise<AsyncIterator<Int>>;
  discount_code: () => Promise<AsyncIterator<Int>>;
  number_code: () => Promise<AsyncIterator<Int>>;
  minimum_amount_required: () => Promise<AsyncIterator<Int>>;
  expiration_date: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StatusCoupon>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Order {
  id: ID_Output;
  ship_address: String;
  amount: Int;
  payment_method?: PaymentMethod;
  status?: StatusOrder;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  ship_address: () => Promise<String>;
  amount: () => Promise<Int>;
  payment_method: () => Promise<PaymentMethod>;
  status: () => Promise<StatusOrder>;
  customer: <T = FragmentableArray<Customer>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ship_address: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  payment_method: () => Promise<AsyncIterator<PaymentMethod>>;
  status: () => Promise<AsyncIterator<StatusOrder>>;
  customer: <T = Promise<AsyncIterator<CustomerSubscription>>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ship_address: () => Promise<String>;
  amount: () => Promise<Int>;
  payment_method: () => Promise<PaymentMethod>;
  status: () => Promise<StatusOrder>;
  customer: <T = FragmentableArray<Customer>>(args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CouponEdge {
  node: Coupon;
  cursor: String;
}

export interface CouponEdgePromise extends Promise<CouponEdge>, Fragmentable {
  node: <T = CouponPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CouponEdgeSubscription
  extends Promise<AsyncIterator<CouponEdge>>,
    Fragmentable {
  node: <T = CouponSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StaffConnection {
  pageInfo: PageInfo;
  edges: StaffEdge[];
}

export interface StaffConnectionPromise
  extends Promise<StaffConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StaffEdge>>() => T;
  aggregate: <T = AggregateStaffPromise>() => T;
}

export interface StaffConnectionSubscription
  extends Promise<AsyncIterator<StaffConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StaffEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStaffSubscription>() => T;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface SiteEdge {
  node: Site;
  cursor: String;
}

export interface SiteEdgePromise extends Promise<SiteEdge>, Fragmentable {
  node: <T = SitePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SiteEdgeSubscription
  extends Promise<AsyncIterator<SiteEdge>>,
    Fragmentable {
  node: <T = SiteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  name: String;
  phone?: String;
  unit?: String;
  total_order?: Int;
  total_amount?: Int;
  email: String;
  password: String;
  image?: String;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  unit: () => Promise<String>;
  total_order: () => Promise<Int>;
  total_amount: () => Promise<Int>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  unit: () => Promise<AsyncIterator<String>>;
  total_order: () => Promise<AsyncIterator<Int>>;
  total_amount: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Site {
  id: ID_Output;
  name?: String;
  description?: String;
  status?: StatusSite;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SitePromise extends Promise<Site>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<StatusSite>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SiteSubscription
  extends Promise<AsyncIterator<Site>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StatusSite>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SiteNullablePromise
  extends Promise<Site | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<StatusSite>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CouponConnection {
  pageInfo: PageInfo;
  edges: CouponEdge[];
}

export interface CouponConnectionPromise
  extends Promise<CouponConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CouponEdge>>() => T;
  aggregate: <T = AggregateCouponPromise>() => T;
}

export interface CouponConnectionSubscription
  extends Promise<AsyncIterator<CouponConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CouponEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCouponSubscription>() => T;
}

export interface CategoryType {
  id: ID_Output;
  name: String;
  slug: String;
  image?: String;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryTypePromise
  extends Promise<CategoryType>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  image: () => Promise<String>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryTypeSubscription
  extends Promise<AsyncIterator<CategoryType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryTypeNullablePromise
  extends Promise<CategoryType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  slug: () => Promise<String>;
  image: () => Promise<String>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  unit?: String;
  price: Int;
  sale_price?: Int;
  discount_percent?: Int;
  quantity: Int;
  image?: String;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  unit: () => Promise<String>;
  price: () => Promise<Int>;
  sale_price: () => Promise<Int>;
  discount_percent: () => Promise<Int>;
  quantity: () => Promise<Int>;
  image: () => Promise<String>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  unit: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  sale_price: () => Promise<AsyncIterator<Int>>;
  discount_percent: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderPreviousValues {
  id: ID_Output;
  ship_address: String;
  amount: Int;
  payment_method?: PaymentMethod;
  status?: StatusOrder;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ship_address: () => Promise<String>;
  amount: () => Promise<Int>;
  payment_method: () => Promise<PaymentMethod>;
  status: () => Promise<StatusOrder>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ship_address: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  payment_method: () => Promise<AsyncIterator<PaymentMethod>>;
  status: () => Promise<AsyncIterator<StatusOrder>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Staff {
  id: ID_Output;
  name: String;
  phone?: String;
  email: String;
  password: String;
  role?: Role;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StaffPromise extends Promise<Staff>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StaffSubscription
  extends Promise<AsyncIterator<Staff>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StaffNullablePromise
  extends Promise<Staff | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Coupon {
  id: ID_Output;
  campaings_name: String;
  discount_percent: Int;
  discount_code: Int;
  number_code: Int;
  minimum_amount_required?: Int;
  expiration_date: String;
  status?: StatusCoupon;
  indexFile?: String;
  isDeleted?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CouponPromise extends Promise<Coupon>, Fragmentable {
  id: () => Promise<ID_Output>;
  campaings_name: () => Promise<String>;
  discount_percent: () => Promise<Int>;
  discount_code: () => Promise<Int>;
  number_code: () => Promise<Int>;
  category_type: <T = FragmentableArray<CategoryType>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  minimum_amount_required: () => Promise<Int>;
  expiration_date: () => Promise<String>;
  status: () => Promise<StatusCoupon>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CouponSubscription
  extends Promise<AsyncIterator<Coupon>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  campaings_name: () => Promise<AsyncIterator<String>>;
  discount_percent: () => Promise<AsyncIterator<Int>>;
  discount_code: () => Promise<AsyncIterator<Int>>;
  number_code: () => Promise<AsyncIterator<Int>>;
  category_type: <T = Promise<AsyncIterator<CategoryTypeSubscription>>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  minimum_amount_required: () => Promise<AsyncIterator<Int>>;
  expiration_date: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StatusCoupon>>;
  indexFile: () => Promise<AsyncIterator<String>>;
  isDeleted: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CouponNullablePromise
  extends Promise<Coupon | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  campaings_name: () => Promise<String>;
  discount_percent: () => Promise<Int>;
  discount_code: () => Promise<Int>;
  number_code: () => Promise<Int>;
  category_type: <T = FragmentableArray<CategoryType>>(args?: {
    where?: CategoryTypeWhereInput;
    orderBy?: CategoryTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  minimum_amount_required: () => Promise<Int>;
  expiration_date: () => Promise<String>;
  status: () => Promise<StatusCoupon>;
  indexFile: () => Promise<String>;
  isDeleted: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "CategoryType",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Staff",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "PaymentMethod",
    embedded: false
  },
  {
    name: "StatusOrder",
    embedded: false
  },
  {
    name: "Coupon",
    embedded: false
  },
  {
    name: "StatusCoupon",
    embedded: false
  },
  {
    name: "Site",
    embedded: false
  },
  {
    name: "StatusSite",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
